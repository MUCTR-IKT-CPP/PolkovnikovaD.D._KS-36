#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
/*Требуется написать программу, в которой:

Будет реализована структура "Банкнота" с полями:
    Наименование
    Номинал (из списка заданного перечислением 1, 5, 10, 20, 50, 100, 1000)
    Курс к рублю
1)Пользователь вводит число N.
2)Создан массив, хранящий N банкнот, который будем называть кошельком, кол-во считывается с клавиатуры.
3) Сгенерировано N банкнот различного нoминала и валюты.
Написаны функции которые:
Подсчитывают общую сумму в рублях хранимую в кошельке.
Формирует срез банкнот с номиналом больше выбранного пользователем и выводит их количество разбивая их по валютам.
Выводит состав кошелька отсортированный по валютам (по алфавиту) и номиналу с количеством каждой существующей банкноты.
Конвертирует все банкноты в рубль через курс набирая итог банкнотами с максимальным номиналом, 
в случае неровной суммы округляем в большую сторону.*/

enum Denomination {
    ONE = 1,
    FIVE = 5,
    TEN = 10,
    TWENTY = 20,
    FIFTY = 50,
    HUNDRED = 100,
    THOUSAND = 1000
};

struct BankNote {
    string name; // Наименование
    Denomination denomination; // Номинал
    double rate; // Курс к рублю
};

// Функция для генерации случайной банкноты
Denomination generateRandomBankNote() {
    // Доступные валюты и их курсы
    /*vector<pair<string, double>> currencies = {
        {"Евро", 80.8},
        {"Доллар", 90.0},
        {"Фунт", 120.5}
    };*/
    //string name_bnk[3] = {"euro", "dollar", "fount"};
    //double value_bnk[3] = {80.8, 90.0, 120.5};
    int randomIndex = rand() % 10; 

    switch (randomIndex) {
        case 0: return ONE;
        case 1: return FIVE;
        case 2: return TEN;
        case 3: return TWENTY;
        case 4: return FIFTY;
        case 5: return HUNDRED;
        case 6: return THOUSAND;
        default: return ONE;
    }
    // Генерация случайного номинала и валюты
    
    /*Denomination denomination = static_cast<Denomination>(rand() % 7); // 0-6, соответствующий перечислению
    string currencyName = currencies[rand() % currencies.size()].first;
    double exchangeRate = currencies[rand() % currencies.size()].second;*/

    //return { currencyName, denomination, exchangeRate };
}

// Функция для подсчета общей суммы в рублях
double calculateTotalInRUB(const vector<BankNote>& wallet) {
    double total = 0.0;
    for (const auto& note : wallet) {
        total += static_cast<double>(note.denomination) * note.rate;
    }
    return total;
}

// Функция для фильтрации и подсчета банкнот с номиналом больше заданного
map<string, int> filterByDenomination(const vector<BankNote>& wallet, Denomination minDenomination) {
    map<string, int> countByCurrency;

    for (const auto& note : wallet) {
        if (note.denomination > minDenomination) {
            countByCurrency[note.name]++;
        }
    }

    return countByCurrency;
}

// Функция для сортировки и вывода состава кошелька
void SortedWallet(const vector<BankNote>& wallet) {
    map<pair<string, Denomination>, int> walletCount;

    for (const auto& note : wallet) {
        walletCount[{note.name, note.denomination}]++;
    }

    for (const auto& entry : walletCount) {
        cout << entry.first.first << " - " << entry.first.second << " (Количество: " << entry.second << ")" << endl;
    }
   
}

// Функция для конвертации всех банкнот в рубль, округляя в большую сторону
double convertToRUB(const vector<BankNote>& wallet) {
    double total = 0.0;
    for (const auto& note : wallet) {
        total += static_cast<double>(note.denomination) * note.rate;
    }
    return ceil(total); // Округление в большую сторону
}

int main() {
    srand(static_cast<unsigned int>(time(0))); // Инициализация генератора случайных чисел

    int N;
    cout << "Введите количество банкнот в кошельке: ";
    cin >> N;

    vector<BankNote> wallet(N);
    
    // Генерация банкнот
    /*for (int i = 0; i < N; i++) {
        wallet[i] = generateRandomBankNote();
    }
    cout << "Сгенерированные банкноты:" << endl;
    for (const auto& note : wallet) {
        cout << note.name << " - " << note.denomination << " (Курс к рублю: " << note.exchangeRate << ")" << endl;
    }*/

   const int quan_varios = 10;
    string name_banknote[quan_varios]  {"USD", "EUR", "GBP", "CHF", "JPY", "CAD", "AUD", "CNY", "SGD", "NOK"}; 
    double rate_banknote[quan_varios] = {90, 95, 110, 100, 0.65, 70, 65, 13, 65, 9}; 
    srand((time(NULL)));
    
    for (int i = 0; i < N; i++){
        int k = rand() % quan_varios;
        wallet[i].name = name_banknote[k];
        wallet[i].rate = rate_banknote[k];
        wallet[i].denomination = generateRandomBankNote();
        cout << wallet[i].name <<"  "<< wallet[i].denomination <<"  "<< wallet[i].rate << endl;
    }
    // Подсчет общей суммы в рублях
    double totalInRUB = calculateTotalInRUB(wallet);
    cout << "Общая сумма в рублях: " << totalInRUB << endl;

    // Фильтрация банкнот по номиналу
    int minDenominationInput;
    cout << "Введите минимальный номинал для фильтрации: ";
    cin >> minDenominationInput;

    Denomination minDenomination = static_cast<Denomination>(minDenominationInput);
    map<string, int> filteredByDenomination = filterByDenomination(wallet, minDenomination);

    cout << "Количество банкнот с номиналом больше " << minDenominationInput << ":" << endl;
    for (const auto& entry : filteredByDenomination) {
        cout << entry.first << ": " << entry.second << endl;
    }

    // Вывод состава кошелька
    cout << "Состав кошелька, отсортированный по валютам и номиналам:" << endl;
    SortedWallet(wallet);

    // Конвертация всех банкнот в рубли
    double totalConvertedToRUB = convertToRUB(wallet);
    int total = totalConvertedToRUB;
    int sum = total - total % 50 + 50;
    cout << "Итоговая сумма в рублях после конвертации: " << totalConvertedToRUB << endl;
    cout << "Итоговая сумма в рублях после округления: " << sum << endl;

    return 0;
}
