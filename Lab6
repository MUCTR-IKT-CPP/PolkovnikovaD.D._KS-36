/*
Лабораторная работа 6. Вариант 3.
Вам необходимо реализовать механизм проверяемого ввода данных с потока ввода. При этом:

    Существует интерфейсный класс ввода, который будет иметь только 1 метод: Считывание с потока ввода >>
    Существует интерфейсный класс валидатора, который будет иметь только 1 метод:
    Проверка считанного значения(принимает в себя значение)
    Существует несколько классов считывания значений для типов: int, double, bool, string, char, array[N, type] 
    (для считывания массива должны использоваться другие считыватели). Нужно реализовать не менее трех считывателей 
    для разных типов. При этом у каждого ввода должен быть строго определен свой формат, 
    если формат не соблюден считывание должен повторятся до тех пор, пока пользователь не прервет его вводом 
    какого-либо спец символа(выбираем на свое усмотрение, можно например CTRL+D признак конца ввода).
    Существует несколько классов валидаторов например проверка больше меньше какого либо значения, 
    проверка на формат строки, проверка на соответствие определенному символу.
    Весь процесс считывания тогда будет выглядеть следующим образом, из потока ввода считываем данные 
    в класс считыватель который проверяет их на соответствие типу, если не возникает ошибки ввода, 
    тогда вызывается проверка на соответствие дополнительным правилам, которые заранее подаются 
    в считыватель при помощи конструктора.
    Считыватель может принимать в качестве аргумента конструктора параметр определяющий реакцию 
    на ошибку ввода, который будет при своем наличии требовать немедленного завершения программы 
    в случае ошибки. Требуется:
    1) Реализовать интерфейсные класс считывателя, а также несколько конечных реализаций
        (Считывание строки, целого числа, плавающей запятой, символа).
    2) (На половину баллов) Продемонстрировать работу считывателей данных, 
        считав некоторый набор информации из консоли.
    3) (Усложненный вариант) Реализовать интерфейсный класс валидатора, а также несколько 
        конечных реализаций(Проверка на максимальную длину строки, 
        максимальное/минимально значение числа, символа из предустановленного набора)
    4) (Усложненный вариант) Реализовать конвейер считывания информации, в котором будет 
        производиться последовательное считывание из потока ввод нескольких данных 
        разного формата с разным набором дополнительных проверок.
    5) (Усложненный вариант) Провести тестовое считывание данных из файлов 
        (с ошибкой (аварийное завершение программы) и без ошибок) и из стандартного
         потока ввода с ошибками при повторяющемся ввода.
*/
#include <iostream>
#include <string>
#include <vector>
#include <memory>

using namespace std;

// Интерфейсный класс для считывания данных.
class Reader {
public:
    virtual void read(istream& in) = 0;
    virtual ~Reader() = default; // Деструктор
    friend ostream& operator<<(ostream& os, const Reader& r) {
        r.print(os); // Вызов метода для вывода информации
        return os;
    }
protected:
    virtual void print(ostream& os) const = 0; // Виртуальный метод для печати
};

// Интерфейсный класс валидатора.
class Validator {
public:
    virtual bool validate(const string& value) = 0;
    virtual ~Validator() = default; // Деструктор
};

// Считыватель для целых чисел.
class IntReader : public Reader {
private:
    int& value; // Ссылка на значение
    vector<unique_ptr<Validator>> validators; // Валидаторы

public:
    IntReader(int& value) : value(value) {}

    void addValidator(Validator* validator) {
        validators.emplace_back(validator);
    }

    void read(istream& in) override {
        string input;
        while (true) {
            cout << "Введите значение с типом int: ";
            if (!getline(in, input) || input.empty()) return;

            try {
                value = stoi(input);
                bool valid = true;

                // Проверка валидаторов
                for (const auto& validator : validators) {
                    if (!validator->validate(input)) {
                        cerr << "Значение не соответствует требованиям! Повторите ввод." << endl;
                        valid = false;
                        break;
                    }
                }

                if (valid) {
                    return; // Успешное считывание
                }
            } catch (const invalid_argument&) {
                cerr << "Введено значение неподходящего типа. Повторите ввод." << endl;
            } catch (const out_of_range&) {
                cerr << "Значение выходит за пределы допустимого диапазона. Повторите ввод." << endl;
            }
        }
    }

protected:
    void print(ostream& os) const override {
        os << "IntReader {value: " << value << "}";
    }
};

// Валидатор для максимального значения.
class MaxValidator : public Validator {
private:
    int maxValue;

public:
    MaxValidator(int maxValue) : maxValue(maxValue) {}

    bool validate(const string& value) override {
        return stoi(value) <= maxValue;
    }
};

// Валидатор для минимального значения.
class MinValidator : public Validator {
private:
    int minValue;

public:
    MinValidator(int minValue) : minValue(minValue) {}

    bool validate(const string& value) override {
        return stoi(value) >= minValue;
    }
};

// Считыватель для строк.
class StringReader : public Reader {
private:
    string& value; // Ссылка на значение

public:
    StringReader(string& value) : value(value) {}

    void read(istream& in) override {
        cout << "Введите строку: ";
        getline(in, value);
    }

protected:
    void print(ostream& os) const override {
        os << "StringReader {value: " << value << "}";
    }
};

// Считыватель для чисел с плавающей запятой.
class DoubleReader : public Reader {
private:
    double& value; // Ссылка на значение

public:
    DoubleReader(double& value) : value(value) {}

    void read(istream& in) override {
        string input;
        while (true) {
            cout << "Введите значение с типом double: ";
            if (!getline(in, input) || input.empty()) return;

            try {
                value = stod(input);
                return; // Успешное считывание
            } catch (const invalid_argument&) {
                cerr << "Введено значение неподходящего типа. Повторите ввод." << endl;
            } catch (const out_of_range&) {
                cerr << "Значение выходит за пределы допустимого диапазона. Повторите ввод." << endl;
            }
        }
    }

protected:
    void print(ostream& os) const override {
        os << "DoubleReader {value: " << value << "}";
    }
};

// Считыватель для символов.
class CharReader : public Reader {
private:
    char& value; // Ссылка на значение

public:
    CharReader(char& value) : value(value) {}

    void read(istream& in) override {
        string input;
        while (true) {
            cout << "Введите символ: ";
            if (!getline(in, input) || input.empty()) return;

            if (input.length() == 1) {
                value = input[0];
                return; // Успешное считывание
            } else {
                cerr << "Ошибка! Введите только один символ." << endl;
            }
        }
    }

protected:
    void print(ostream& os) const override {
        os << "CharReader {value: " << value << "}";
    }
};

// Валидатор для определенного набора символов.
class CharacterSetValidator : public Validator {
private:
    string allowedChars;

public:
    CharacterSetValidator(const string& allowedChars) : allowedChars(allowedChars) {}

    bool validate(const string& value) override {
        return allowedChars.find(value) != string::npos;
    }
};

// Переопределение операторов считывания
istream& operator>>(istream& in, Reader* r) {
    r->read(in);
    return in;
}

istream& operator>>(istream& in, Reader& r) {
    r.read(in);
    return in;
}

// Главная функция программы.
int main() {
    int intValue = 0;
    double doubleValue = 0.0;
    string stringValue;
    char charValue = '\0'; // Инициализация переменной для считывания символа

    // Создание валидаторов
    MinValidator* minValidator = new MinValidator(10);
    MaxValidator* maxValidator = new MaxValidator(100);
    CharacterSetValidator* charValidator = new CharacterSetValidator("abc"); // Разрешенные символы 'a', 'b', 'c'

    // Создание считывателей
    IntReader intReader(intValue);
    intReader.addValidator(minValidator);
    intReader.addValidator(maxValidator);

    DoubleReader doubleReader(doubleValue);
    StringReader stringReader(stringValue);
    CharReader charReader(charValue); // Считыватель для символа

    // Использование оператора считывания
    cin >> &intReader; // Чтение целого числа
    cin >> &doubleReader; // Чтение числа с плавающей запятой
    cin >> &stringReader; // Чтение строки
    cin >> &charReader; // Чтение символа

    // Проверка валидатора для символа
    if (!charValidator->validate(string(1, charValue))) {
        cerr << "Символ не входит в предустановленный набор! Убедитесь, что это один из: " << "abc" << endl;
    }

    // Вывод считанных значений
    cout << intReader << endl;
    cout << doubleReader << endl;
    cout << stringReader << endl;
    cout << charReader << endl;

    return 0;
}
