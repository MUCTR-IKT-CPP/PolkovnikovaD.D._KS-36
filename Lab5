#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <ctime> // Добавлено для time
using namespace std;

/*
Задание 5. Вариант 3.
1) Создайте класс Животное, со свойствами: 
        имя, 
        возраст, 
        сытость (от 0 до 100), 
        усталость и 
        методом 
            играть, 
            спать, 
            есть
            проверками на необходимость спать и есть.
2) Создайте класс 
    Кот,
    Собака,
    Вомбат, 
    Крыса, 
    каждый из которых будет обладать собственным 
        способом взаимодействия, 
        длительностью сна
        циклами питания.
3) Создайте класс Контактный зоопарк, который будет хранить в себе массив животных.
4)Создайте метод проведения осмотра зоопарка сотрудником, 
    в процессе которого животные которым требуется отдых отправляются отдыхать, 
    животные, которым требуется еда, кормятся.
*/

/*Заметка от Крашенникова: Звери уставшие, 
голодные или поспали --> как метод работает и какой преподносится, чтобы им помочь */
class Animal {
protected:
    string name;
    int age;
    int hunger;    // от 0 до 100
    int tiredness; // от 0 до 100
    bool condition = false;

public:
    Animal(string name, int age) : name(name), age(age), hunger(0), tiredness(0) {}

    // virtual void play(unique_ptr<Animal>, double intensity) = 0;
    virtual void play() = 0;
    virtual void sleep() = 0;
    virtual void eat() = 0;
    void setCondition(bool cond) {
        condition = cond;
    }
    bool isALright() const {
        return condition;
    }
    bool needsFood() const {
        return hunger >= 80; // Если сытость >= 80, животное голодно
    }

    bool needsRest() const {
        return tiredness >= 80; // Если усталость >= 80, животное устало
    }

    friend ostream& operator<<(ostream& os, const Animal& animal) { 
        // выводит класс с приставкой от компилятора
        os << "<" << typeid(animal).name() << ">"<<" {Name: " << animal.name << ", Age: " << animal.age
           << ", Hunger: " << animal.hunger << ", Tiredness: " << animal.tiredness << "}";
        return os;
    }
};

class Cat : public Animal {
public:
    Cat(string name, int age) : Animal(name, age) {}

    void play() override {
        cout << name << " the Cat is playing!\n";
        tiredness += 80; // Усталость увеличивается
        hunger += 10;    // Сытость уменьшается        
    }

    void sleep() override {
        cout << name << " the Cat is sleeping for 8 hours.\n";
        tiredness = 0; // Усталость восстанавливается
    }

    void eat() override {
        cout << name << " the Cat is eating.\n";
        hunger = max(0, hunger - 30); // Сытость восстанавливается
    }
};

class Dog : public Animal {
public:
    Dog(string name, int age) : Animal(name, age) {}

    void play() override {
        cout << name << " the Dog is playing!\n";
        tiredness += 15; // Усталость увеличивается
        hunger += 89;    // Сытость уменьшается
    }

    void sleep() override {
        cout << name << " the Dog is sleeping for 6 hours.\n";
        tiredness = 0; // Усталость восстанавливается
    }

    void eat() override {
        cout << name << " the Dog is eating.\n";
        hunger = max(0, hunger - 40); // Сытость восстанавливается
    }
};

class Wombat : public Animal {
public:
    Wombat(string name, int age) : Animal(name, age) {}

    void play() override {
        cout << name << " the Wombat is playing!\n";
        tiredness += 25; // Усталость увеличивается
        hunger += 15;    // Сытость уменьшается
    }

    void sleep() override {
        cout << name << " the Wombat is sleeping for 10 hours.\n";
        tiredness = 0; // Усталость восстанавливается
    }

    void eat() override {
        cout << name << " the Wombat is eating.\n";
        hunger = max(0, hunger - 20); // Сытость восстанавливается
    }
};

class Rat : public Animal {
public:
    Rat(string name, int age) : Animal(name, age) {}

    void play() override {
        cout << name << " the Rat is playing!\n";
        tiredness += 90; // Усталость увеличивается
        hunger += 90;     // Сытость уменьшается        
    }

    void sleep() override {
        cout << name << " the Rat is sleeping for 4 hours.\n";
        tiredness = 0; // Усталость восстанавливается
    }

    void eat() override {
        cout << name << " the Rat is eating.\n";
        hunger = max(0, hunger - 10); // Сытость восстанавливается
        
    }
};

class Zoo {
public:
    vector<unique_ptr<Animal>> animals;

public:
    void addAnimal(unique_ptr<Animal> animal) {
        animals.push_back(move(animal));
    }
    bool animalsAllRight() const {
        for (auto& animal : animals) {
            if (!animal->isALright()) {
                return false;
            }
        }
        return true;
    }
    void inspect() {
        cout << "Inspecting the zoo...\n";
        for (auto& animal : animals) {
            if (animal->needsRest()) { // стрелка вызывает метод у объекта через указатель
                animal->sleep();
            } else if (animal->needsFood()) {
                animal->eat();
            }
            cout << *animal << endl; // Вывод информации о конкретном животном через указатель
            if (!animal->needsFood() && !animal->needsRest()) {
                animal->setCondition(true);
            }
        }
    }
};

int main() {
    srand(static_cast<unsigned>(time(0)));

    Zoo zoo;
    zoo.addAnimal(make_unique<Cat>("Whiskers", 2));
    zoo.addAnimal(make_unique<Dog>("Rex", 3));
    zoo.addAnimal(make_unique<Wombat>("Wally", 1));
    zoo.addAnimal(make_unique<Rat>("Remy", 1));
    for (auto& animal : zoo.animals) {
        animal->play();
        // Проведение осмотра зоопарка
        
    }
    do {
    zoo.inspect();
        cout << "------" << endl; // Разделитель для итераций
    } while(!zoo.animalsAllRight());
    return 0;
}
