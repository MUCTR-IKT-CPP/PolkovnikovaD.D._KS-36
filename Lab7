/**
 * Лабораторная работа 7.
 * Разработать контейнерный класс без использования контейнерных классов стандартной библиотеки C++
 * Вариант 1
 * Вариант 1
 * В рамках задачи требуется написать программу, которая будет содержать реализацию контейнера "очередь" 
 * и демонстрировать его работу.
 * ! Разработанный контейнерный класс должен быть шаблонным. 
 * ! Разработанный контейнерный класс не должен использовать стандартную библиотеку c++ для хранения своих элементов.
 * 
 * Для очереди определены следующие операции:
 * 1) создание пустой очереди
 * 2) добавить элемент в конец
 * 3) получить элемент из начала
 * 4) удалить элемент из начала
 * 5) проверка, пустая ли очередь
 * 6) получить размер очереди
 * 7) Контейнер должен иметь объект итератор, позволяющий обойти всю очередь 
 * через цикл for-each(for(auto el: container))
 */

#include <iostream>
#include <stdexcept>
// Контейнерный класс - класс, использующий для хранения и управления коллекцией объектов.
/**
 * Признаки контейнерного классса:
 * 1. Управление коллекцией объектов
 * 2. Интерфейс для операций
 * 3. Итерация
 * 4. Обобщённость
 * Отличия от других классов:
 * 1. Цель
 * 2. Состояние
 * 3. Интерфейс
 */
template <typename T>
class Queue {   // Контейнерный класс "очередь"
private:
    struct Node {   // 
        T data;     // Stores the actual data of the node, of type T
        Node* next; // Points to the next node in the queue.
        Node(const T& value) : data(value), next(nullptr) {}    // Constructor for the Node class
    };

    Node* front;        // Points to the front of the queue
    Node* rear;         // Points to the rear of the queue
    size_t size;        // Points to the next node in the queue.

public:
    Queue() : front(nullptr), rear(nullptr), size(0) {}

    /**
     * Destructor for the Queue class.
     * 
     * This function is responsible for freeing the memory allocated by the queue.
     * It does this by continuously dequeuing elements until the queue is empty.
     * 
     * @throws None
     */
    ~Queue() {
        while (!isEmpty()) {
            dequeue();
        }
    }

        /**
     * Adds a new element to the end of the queue.
     *
     * @param value the element to be added to the queue
     *
     * @return None
     *
     * @throws None
     */
    void enqueue(const T& value) {
        Node* newNode = new Node(value);
        if (isEmpty()) {
            front = rear = newNode;
        } else {
            rear->next = newNode;
            rear = newNode;
        }
        size++;
    }

        /**
     * Removes the element at the front of the queue.
     *
     * @return The element that was removed from the front of the queue.
     *
     * @throws std::runtime_error If the queue is empty.
     */
    T dequeue() {
        if (isEmpty()) {
            throw std::runtime_error("Queue is empty");
        }
        Node* temp = front;
        T data = front->data;
        front = front->next;
        delete temp;
        size--;
        return data;
    }

        /**
     * Returns the element at the front of the queue without removing it.
     *
     * @return The element at the front of the queue.
     *
     * @throws std::runtime_error If the queue is empty.
     */
    T peek() const {
        if (isEmpty()) {
            throw std::runtime_error("Queue is empty");
        }
        return front->data;
    }

        /**
     * Checks if the queue is empty.
     *
     * @return true if the queue is empty, false otherwise.
     */
    bool isEmpty() const {
        return size == 0;
    }

        /**
     * Returns the number of elements in the queue.
     *
     * @return The size of the queue.
     *
     * @throws None
     */
    size_t getSize() const {
        return size;
    }

    class Iterator {
    private:
        Node* current;
    public:
        Iterator(Node* start) : current(start) {}

        T& operator*() const {
            return current->data;
        }

        Iterator& operator++() {
            current = current->next;
            return *this;
        }

                /**
         * Checks if the current iterator is not equal to another iterator.
         *
         * @param other the iterator to compare with
         *
         * @return true if the iterators are not equal, false otherwise
         *
         * @throws None
         */
        bool operator!=(const Iterator& other) const {
            return current != other.current;
        }
    };

        /**
     * Returns an iterator pointing to the beginning of the queue.
     *
     * @return An iterator pointing to the first element in the queue.
     *
     * @throws None
     */
    Iterator begin() {
        return Iterator(front);
    }

        /**
     * Returns an iterator pointing to the end of the queue.
     *
     * @return An iterator pointing to the end of the queue, which is an invalid iterator.
     *
     * @throws None
     */
    Iterator end() {
        return Iterator(nullptr);
    }
};

int main() {
    Queue<int> queue;

    // Добавляем элементы
    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);

    std::cout << "Queue size: " << queue.getSize() << std::endl;

    // Обходим элементы очереди
    for (auto el : queue) {
        std::cout << el << " ";
    }
    std::cout << std::endl;

    // Получаем и удаляем элементы
    while (!queue.isEmpty()) {
        std::cout << "Dequeued: " << queue.dequeue() << std::endl;
    }

    // Проверяем, пустая ли очередь
    std::cout << "Is queue empty? " << (queue.isEmpty() ? "Yes" : "No") << std::endl;

    return 0;
}
