#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <numeric>

using namespace std;
/*
 * Заполнение массива случайными числами
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 */
void fillArray(int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        arr[i] = rand() % 21; // Заполнение случайными числами от 0 до 20
    }
}
/*
 * Печать элементов массива
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 */
void printArray(const int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}
/*
 * Поиск последовательностей в массиве
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 * @param type тип последовательности: "ascending"(возрастание), "descending"(убывание) или "alternating"(чередование).
 */
void findSequences(int* arr, int size, int choice) {
    bool found = false;
    for (int i = 0; i < size; i++){
        int j = i;
        if (choice == 1){
            while (j < size - 1 && arr[j] < arr[j + 1]) 
                j++;
        }
        else if (choice == 2){ 
            while (j < size- 1 && arr[j] > arr[j + 1]) 
                j++;
        }
        else if (choice == 3) 
        {
            bool increasing = arr[i] < arr[i + 1];
            
            while (j < size - 1 && ((increasing && arr[j] < arr[j + 1]) || (!increasing && arr[j] > arr[j + 1]))) {
                j++;
                increasing = !increasing;
            }
        }
        
        if (j - i >= 2) 
        {
            found = true;

            cout << "\tПоследовательность от индекса " << i << " до " << j << ": ";

            for (int k = i; k <= j; k++) 
                cout << arr[k] << " ";

            cout << endl;
            
            i = j;
        }
    }

    if (!found) {
        cout << "No sequences found." << endl;
    }
}
/*
 * Нахождение минимального, максимального значений, среднего и медианы
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 */
void findMinMaxAvgMedian(int* arr, int size) {
    int minVal = arr[0], maxVal = arr[0];
    int minIdx = 0, maxIdx = 0;

    for (int i = 1; i < size; ++i) {
        if (arr[i] < minVal) {
            minVal = arr[i];
            minIdx = i;
        }
        if (arr[i] > maxVal) {
            maxVal = arr[i];
            maxIdx = i;
        }
    }

    double avg = static_cast<double>(std::accumulate(arr, arr + size, 0)) / size;

    // Сортируем для нахождения медианы
    vector<int> sortedArr(arr, arr + size);
    sort(sortedArr.begin(), sortedArr.end());
    double median;
    if (size % 2 == 0) {
        median = (sortedArr[size / 2 - 1] + sortedArr[size / 2]) / 2.0;
    } else {
        median = sortedArr[size / 2];
    }

    cout << "Min value: " << minVal << " at index " << minIdx << endl;
    cout << "Max value: " << maxVal << " at index " << maxIdx << endl;
    cout << "Average: " << avg << endl;
    cout << "Median: " << median << endl;
}
/*
 * Срез массива от индекса a до b
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 * @param a начальный индекс среза.
 * @param b конечный индекс среза.
 */
void sliceArray(int* arr, int size, int a, int b) {
    if (a < 0 || b >= size || a > b) {
        cout << "Invalid indices for slicing!" << endl;
        return;
    }

    int newSize = b - a + 1;
    int* slicedArray = new int[newSize];

    for (int i = a; i <= b; ++i) {
        slicedArray[i - a] = arr[i];
    }

    cout << "Sliced array: ";
    printArray(slicedArray, newSize);
    
    delete[] slicedArray; // Освобождение памяти
}
/*
 * Сортировка массива методом вставок
 *
 * @param arr указатель на массив.
 * @param size размер массива.
 */
void insertionSort(int* arr, int size) {
    int* sortedArray = new int[size];
    for (int i = 0; i < size; ++i) {
        sortedArray[i] = arr[i];
    }

    for (int i = 1; i < size; ++i) {
        int key = sortedArray[i];
        int j = i - 1;

        while (j >= 0 && sortedArray[j] > key) {
            sortedArray[j + 1] = sortedArray[j];
            j--;
        }
        sortedArray[j + 1] = key;
    }

    cout << "Sorted array: ";
    printArray(sortedArray, size);
    
    delete[] sortedArray; // Освобождение памяти
}

int main() {
    srand(static_cast<unsigned>(time(0))); // Инициализация генератора случайных чисел

    int N;
    std::cout << "Введите размер массива N: ";
    std::cin >> N;

    int* array = new int[N];
    fillArray(array, N);

    cout << "Сгенерированный массив: ";
    printArray(array, N);

    int choice;
    do {
        cout << "\nВыберите манипуляцию с массивом:\n";
        cout << "1) Поиск последовательностей\n";
        cout << "2) Поиск максимального и минимального значения\n";
        cout << "3) Формирование среза массива\n";
        cout << "4) Сортировка вставками\n";
        cout << "5) Выход\n";
        cin >> choice;

        switch (choice) {
            case 1: {
                int ch;
                cout << "Введите тип последовательности (ascending (1), descending (2), alternating(3)): ";
                cin >> ch;
                findSequences(array, N, ch);
                break;
            }
            case 2:
                findMinMaxAvgMedian(array, N);
                break;
            case 3: {
                int a, b;
                cout << "Введите индексы a и b для среза массива: ";
                cin >> a >> b;
                sliceArray(array, N, a, b);
                break;
            }
            case 4:
                insertionSort(array, N);
                break;
            case 5:
                break;
            default:
                cout << "Неверный выбор!" << endl;
        }
    } while (choice != 5);

    delete[] array; // Освобождение памяти
    return 0;
}
